--> Вы можете переключиться на учетную запись postgres на вашем сервере с помощью следующей команды:
sudo -i -u postgres

--> Теперь вы можете немедленно получить доступ к командной строке PostgresSQL с помощью следующей команды:
psql

--> Закройте командную строку PostgreSQL с помощью следующей команды:
\q

--> delete table  row:
delete from product_photo where id=1;

--> update:
update product_photo set url='phone.jpg' where id=1;

ALTER DATABASE dbname OWNER TO new_owner;

ALTER TABLE public.table_name OWNER TO new_owner;

\? clear;


CREATE DATABASE testdb WITH OWNER = postgres ENCODING = 'UTF8' CONNECTION LIMIT = -1 ;

--> DISTINCT ->> CONNECTING TWO REPEATED LINES, for example:  SELECT DISTINCT city FROM  table; //

--> COUNT() ->> INCLUDES THE NUMBER OF Rows, for example:: SELECT COUNT(*) FROM table; // 20

SELECT COUNT(DISTINCT country) FROM db_name; //

--> logiceskiye operatory:

SELECT * FROM table WHERE condition1 AND conditon2;
SELECT * FROM table WHERE condition1 OR conditon2;
SELECT * FROM table WHERE condition1 AND conditon2 AND conditon3;
--> for example:

SELECT * FROM table WHERE condition1 >= 20 AND  condition2 <= 40 ; //
--> the same:
SELECT * FROM table WHERE freight BETWEEN  20 AND 40; //

SELECT * FROM table WHERE country = 'Mexico' OR  country = 'USA' OR  country = 'Canada' OR  country = 'Germany' ;
--> the same:
SELECT * FROM table WHERE country IN ('Mexico', 'USA', 'Canada', 'Germany');
--> otrisaniya:
SELECT * FROM table WHERE country NOT IN ('Mexico', 'USA', 'Canada', 'Germany');

--> Sortirowka:

SELECT country FROM customers ORDER BY country ASC; // A-Z
SELECT country FROM customers ORDER BY country DESC; // Z-A
SELECT country, sity FROM customers ORDER BY country ASC, sity ASC; // A-Z

--> MAX, MIN, AVG, SUM;

SELECT MIN(unit_price) FROM products WHERE units_in_stock > 30 ;

SELECT MAX(unit_in_stock) FROM products WHERE unit_price > 30;

SELECT AVG(shipped_date - order_date) FROM orders WHERE ship_country =  'USA' ;

SELECT SUM(unit_price * units_in_stock) FROM products WHERE discontinued <> 1 ;


--> Pattern matching with LIKE:

SELECT last_name , first_name * FROM employees WHERE first_name LIKE '%n'

SELECT last_name , first_name * FROM employees WHERE last_name LIKE 'B%'

--> LIMIT:

SELECT product_name, unit_price FROM products WHERE discontinued <> 1 ORDER BY unit_price ASC LIMIT 10 ;

--> filter IS NULL:

SELECT ship_country, ship_city, ship_region FROM orders WHERE ship_region IS NULL ;

--> filter IS NOT NULL:

SELECT ship_country, ship_city, ship_region FROM orders WHERE ship_region IS NOT NULL ;

--> GROUP BY : between WHERE and ORDER BY:

SELECT ship_country, COUNT(*) FROM orders WHERE freight > 50 GROUP BY ship_country ORDER BY COUNT(*) DESC;

SELECT category_id, SUM(units_in_stock) as sum_in_stock  FROM products GROUP BY category_id ORDER BY SUM(units_in_stock) LIMIT 10;

SELECT json_agg(product_name), category_id, SUM(units_in_stock) as sum_in_stock FROM products GROUP BY category_id ORDER BY SUM(units_in_stock) LIMIT 10;

--> HAVING : after GROUP BY before ORDER BY ;

SELECT category_id, SUM(unit_price * units_in_stock) from products WHERE discontinued <> 1 GROUP BY category_id HAVING SUM(unit_price * units_in_stock) > 6000 ORDER BY SUM(unit_price * units_in_stock) DESC;

--> UNION, UNION ALL:  объединение;

SELECT country FROM customers UNION SELECT country FROM employees ;

SELECT country FROM customers UNION ALL SELECT country FROM employees ;

--> INTERSECT, INTERSECT ALL: пересечения;

SELECT country FROM customers INTERSECT SELECT country FROM suppliers ;

SELECT country FROM customers INTERSECT ALL SELECT country FROM suppliers ;